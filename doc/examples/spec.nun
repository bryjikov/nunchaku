
# recursive spec and rec

val nat : type.

val z : nat.
val s : nat -> nat.

val even : nat -> prop.
val odd : nat -> prop.

rec even :=
  even z ;
  ~ (even (s z));
  forall n. (even n = odd (s n))
and odd :=
  odd (s z);
  ~ (odd z);
  forall n. (odd n = even (s n)).

val list : type -> type.
val nil : pi a. list a.
val cons : pi a. a -> list a -> list a.

# partial funs
val head : pi a. list a -> a.
val tail : pi a. list a -> list a.

# specification for lists of polymorphic lists
spec @head (list ?a) as head :=
    head nil = nil;
    forall x l. head (cons x l) = x
and @tail (list ?a) as tail :=
    tail nil = nil;
    forall x l. tail (cons x l) = l.

# specification for lists of nat
spec @head nat as h :=
    h nil = z;
    forall x l. h (cons x l) = x.

# odd number that is >= 4
goal exists l. (odd (head l) && (exists m. head l = s (s (s (s m))))).

