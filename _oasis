OASISFormat: 0.4
Name:        nunchaku
Version:     0.1
Homepage:    https://github.com/nunchaku/nunchaku
Authors:     Simon Cruanes, Jasmin Blanchette
License:     BSD-2-clause
LicenseFile: LICENSE
Plugins:     META (0.3), DevFiles (0.3)
OCamlVersion: >= 4.00.1
BuildTools:  ocamlbuild
FilesAB:     src/main/const.ml.ab
AlphaFeatures: compiled_setup_ml, ocamlbuild_more_args

Synopsis:    A counter-example finder for higher-order logic

XOCamlbuildExtraArgs: "-menhir 'menhir --dump --explain' -j 0"

Flag "random"
  Description:      enable the library for generating random data
  Default:          true

Library "nunchaku_core"
  Path:             src/core/
  Pack:             true
  Modules:          ID, Var, MetaVar, Location, Intf, Utils, Transform,
                    UntypedAST, Model, TypeUnify, Problem, FO, Reduce,
                    Solver_intf, Env, Signature, Statement,
                    Scheduling, CVC4, Polarity, Traversal, ProblemMetadata,
                    TyCardinality, Prelude, TypeCheck,
                    terms/TermInner,
                    terms/TermTyped,
                    terms/TermPoly,
                    terms/TermMono,
                    terms/Pattern,
                    types/TypePoly,
                    types/TypeMono
  Install:          true
  FindlibName:      nunchaku
  BuildDepends:     containers, containers.sexp, containers.iter,
                    containers.data, sequence, unix, threads, zarith

Library "nunchaku_parsers"
  Path:             src/parsers/
  Modules:          NunParsingUtils, NunLexer, NunParser, NunPrintTPTP,
                    NunTPTPLexer, NunTPTPParser, NunTPTPPreprocess
  Install:          true
  FindlibName:      parsers
  FindlibParent:    nunchaku_core
  BuildTools:       menhir
  BuildDepends:     nunchaku

Library "nunchaku_transformations"
  Path:             src/transformations
  Pack:             true
  Modules:          Skolem,
                    TypeInference,
                    ElimPatternMatch,
                    Monomorphization,
                    Specialize,
                    LambdaLift,
                    ElimHOF,
                    ElimRecursion,
                    ElimMultipleEqns,
                    ElimIndPreds,
                    ElimCopy,
                    Polarize,
                    Unroll,
                    IntroGuards
  Install:          true
  FindlibName:      transformations
  FindlibParent:    nunchaku_core
  BuildDepends:     containers, nunchaku

Library "nunchaku_random"
  Path:             src/random
  Pack:             true
  Modules:          Term_random
  Install$:         flag(random)
  Build$:           flag(random)
  FindlibParent:    nunchaku_core
  FindlibName:      random
  BuildDepends:     nunchaku, qcheck

Executable nunchaku
  Path:             src/main/
  Install:          true
  CompiledObject:   native
  MainIs:           nunchaku.ml
  BuildDepends:     nunchaku, nunchaku.transformations, nunchaku.parsers

PreBuildCommand:    make qtest-gen

Executable run_qtest
  Path:             qtest/
  Install:          false
  CompiledObject:   native
  MainIs:           run_qtest.ml
  Build$:           flag(tests)
  BuildDepends:     nunchaku, nunchaku.parsers, nunchaku.transformations,
                    nunchaku.random, oUnit, qcheck

Test all
  Command:      ./run_qtest.native
  TestTools:    run_qtest
  Run$:         flag(tests)

Document nunchaku
  Title:                Documentation of Nunchaku
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Build$:               flag(docs)
  Install:              true
  XOCamlbuildPath:      .
  XOCamlbuildExtraArgs:
    "-docflags '-colorize-code -short-functors -charset utf-8'"
  XOCamlbuildLibraries:
    nunchaku, nunchaku.parsers, nunchaku.transformations

